const ErrorConstructorDependencies = { global: 'error/constructor' };

const ErrorStaticDependencies = { isError: 'error/is-error' };

const TypedArrayStaticMethods = {
  from: { global: 'typed-array/from' },
  of: { global: 'typed-array/of' },
};

export const Globals = {
  AsyncDisposableStack: 'async-disposable-stack/constructor',
  AsyncIterator: 'async-iterator/constructor',
  AggregateError: 'aggregate-error/constructor',
  ArrayBuffer: { global: 'array-buffer/constructor' },
  DataView: { global: 'data-view/constructor' },
  DOMException: { global: 'dom-exception/constructor' },
  DisposableStack: 'disposable-stack/constructor',
  Error: ErrorConstructorDependencies,
  EvalError: ErrorConstructorDependencies,
  Float32Array: 'typed-array/float32-array',
  Float64Array: 'typed-array/float64-array',
  Int8Array: 'typed-array/int8-array',
  Int16Array: 'typed-array/int16-array',
  Int32Array: 'typed-array/int32-array',
  Iterator: 'iterator/constructor',
  Uint8Array: 'typed-array/uint8-array',
  Uint8ClampedArray: 'typed-array/uint8-clamped-array',
  Uint16Array: 'typed-array/uint16-array',
  Uint32Array: 'typed-array/uint32-array',
  Map: 'map/constructor',
  Number: { global: 'number/constructor' },
  Promise: 'promise/constructor',
  RangeError: ErrorConstructorDependencies,
  ReferenceError: ErrorConstructorDependencies,
  Reflect: undefined,
  RegExp: { global: 'regexp/constructor' },
  Set: 'set/constructor',
  SuppressedError: 'suppressed-error/constructor',
  Symbol: 'symbol/constructor',
  SyntaxError: ErrorConstructorDependencies,
  TypeError: ErrorConstructorDependencies,
  URIError: ErrorConstructorDependencies,
  URL: 'url/constructor',
  URLSearchParams: 'url-search-params/constructor',
  WeakMap: 'weak-map/constructor',
  WeakSet: 'weak-set/constructor',
  atob: 'atob',
  btoa: 'btoa',
  clearImmediate: 'clear-immediate',
  fetch: { global: 'promise/constructor' },
  globalThis: 'global-this',
  parseFloat: 'parse-float',
  parseInt: 'parse-int',
  queueMicrotask: 'queue-microtask',
  self: 'self',
  setImmediate: 'set-immediate',
  structuredClone: 'structured-clone',
};

export const StaticProperties = {
  AsyncIterator: {
    from: 'async-iterator/from',
  },
  Array: {
    from: 'array/from',
    fromAsync: 'array/from-async',
    isTemplateObject: 'array/is-template-object',
    of: 'array/of',
  },
  ArrayBuffer: {
    isView: { global: 'array-buffer/is-view' },
  },
  Error: ErrorStaticDependencies,
  EvalError: ErrorStaticDependencies,
  Iterator: {
    concat: 'iterator/concat',
    from: 'iterator/from',
    range: 'iterator/range',
    zip: 'iterator/zip',
    zipKeyed: 'iterator/zip-keyed',
  },
  JSON: {
    isRawJSON: 'json/is-raw-json',
    parse: 'json/parse',
    rawJSON: 'json/raw-json',
    stringify: 'json/stringify',
  },
  Map: {
    from: 'map/from',
    groupBy: 'map/group-by',
    of: 'map/of',
  },
  Math: {
    acosh: 'math/acosh',
    asinh: 'math/asinh',
    atanh: 'math/atanh',
    cbrt: 'math/cbrt',
    clz32: 'math/clz32',
    cosh: 'math/cosh',
    expm1: 'math/expm1',
    fround: 'math/fround',
    f16round: 'math/f16round',
    hypot: 'math/hypot',
    imul: 'math/imul',
    log10: 'math/log10',
    log1p: 'math/log1p',
    log2: 'math/log2',
    sign: 'math/sign',
    sinh: 'math/sinh',
    sumPrecise: 'math/sum-precise',
    tanh: 'math/tanh',
    trunc: 'math/trunc',
  },
  Number: {
    EPSILON: 'number/epsilon',
    MAX_SAFE_INTEGER: 'number/max-safe-integer',
    MIN_SAFE_INTEGER: 'number/min-safe-integer',
    isFinite: 'number/is-finite',
    isInteger: 'number/is-integer',
    isNaN: 'number/is-nan',
    isSafeInteger: 'number/is-safe-integer',
    parseFloat: 'number/parse-float',
    parseInt: 'number/parse-int',
  },
  Object: {
    assign: 'object/assign',
    create: 'object/create',
    defineProperties: 'object/define-properties',
    defineProperty: 'object/define-property',
    entries: 'object/entries',
    freeze: 'object/freeze',
    fromEntries: 'object/from-entries',
    getOwnPropertyDescriptor: 'object/get-own-property-descriptor',
    getOwnPropertyDescriptors: 'object/get-own-property-descriptors',
    getOwnPropertyNames: 'object/get-own-property-names',
    getOwnPropertySymbols: 'object/get-own-property-symbols',
    getPrototypeOf: 'object/get-prototype-of',
    groupBy: 'object/group-by',
    hasOwn: 'object/has-own',
    is: 'object/is',
    isExtensible: 'object/is-extensible',
    isFrozen: 'object/is-frozen',
    isSealed: 'object/is-sealed',
    keys: 'object/keys',
    preventExtensions: 'object/prevent-extensions',
    seal: 'object/seal',
    setPrototypeOf: 'object/set-prototype-of',
    values: 'object/values',
  },
  Promise: {
    all: 'promise/all',
    allSettled: 'promise/all-settled',
    any: 'promise/any',
    race: 'promise/race',
    try: 'promise/try',
    withResolvers: 'promise/with-resolvers',
  },
  RangeError: ErrorStaticDependencies,
  ReferenceError: ErrorStaticDependencies,
  Reflect: {
    apply: 'reflect/apply',
    construct: 'reflect/construct',
    defineProperty: 'reflect/define-property',
    deleteProperty: 'reflect/delete-property',
    get: 'reflect/get',
    getOwnPropertyDescriptor: 'reflect/get-own-property-descriptor',
    getPrototypeOf: 'reflect/get-prototype-of',
    has: 'reflect/has',
    isExtensible: 'reflect/is-extensible',
    ownKeys: 'reflect/own-keys',
    preventExtensions: 'reflect/prevent-extensions',
    set: 'reflect/set',
    setPrototypeOf: 'reflect/set-prototype-of',
  },
  RegExp: {
    escape: 'regexp/escape',
  },
  Set: {
    from: 'set/from',
    of: 'set/of',
  },
  String: {
    cooked: 'string/cooked',
    dedent: 'string/dedent',
    fromCodePoint: 'string/from-code-point',
    raw: 'string/raw',
  },
  Symbol: {
    asyncDispose: 'symbol/async-dispose',
    asyncIterator: 'symbol/async-iterator',
    customMatcher: 'symbol/custom-matcher',
    dispose: 'symbol/dispose',
    for: 'symbol/for',
    hasInstance: 'symbol/has-instance',
    isConcatSpreadable: 'symbol/is-concat-spreadable',
    isRegisteredSymbol: 'symbol/is-registered-symbol',
    isWellKnownSymbol: 'symbol/is-well-known-symbol',
    iterator: 'symbol/iterator',
    keyFor: 'symbol/key-for',
    match: 'symbol/match',
    matchAll: 'symbol/match-all',
    metadata: 'symbol/metadata',
    replace: 'symbol/replace',
    search: 'symbol/search',
    species: 'symbol/species',
    split: 'symbol/split',
    toPrimitive: 'symbol/to-primitive',
    toStringTag: 'symbol/to-string-tag',
    unscopables: 'symbol/unscopables',
  },
  SyntaxError: ErrorStaticDependencies,
  TypeError: ErrorStaticDependencies,
  URIError: ErrorStaticDependencies,
  URL: {
    canParse: 'url/can-parse',
    parse: 'url/parse',
  },
  WeakMap: {
    from: 'weak-map/from',
    of: 'weak-map/of',
  },
  WeakSet: {
    from: 'weak-set/from',
    of: 'weak-set/of',
  },
  Float32Array: TypedArrayStaticMethods,
  Float64Array: TypedArrayStaticMethods,
  Int8Array: TypedArrayStaticMethods,
  Int16Array: TypedArrayStaticMethods,
  Int32Array: TypedArrayStaticMethods,
  Uint8Array: {
    ...TypedArrayStaticMethods,
    fromBase64: 'typed-array/from-base64',
    fromHex: 'typed-array/from-hex',
  },
  Uint8ClampedArray: TypedArrayStaticMethods,
  Uint16Array: TypedArrayStaticMethods,
  Uint32Array: TypedArrayStaticMethods,
  WebAssembly: {
    CompileError: ErrorConstructorDependencies,
    LinkError: ErrorConstructorDependencies,
    RuntimeError: ErrorConstructorDependencies,
  },
};

export const InstanceProperties = {
  at: 'instance/at',
  anchor: { global: 'string/anchor' },
  big: { global: 'string/big' },
  blink: { global: 'string/blink' },
  bold: { global: 'string/bold' },
  chunks: { global: 'iterator/chunks' },
  clamp: 'instance/clamp',
  codePointAt: 'instance/code-point-at',
  concat: 'instance/concat',
  copyWithin: 'instance/copy-within',
  demethodize: 'instance/demethodize',
  description: { global: 'symbol/description' },
  dotAll: { global: 'regexp/dot-all' },
  drop: { global: 'iterator/drop' },
  endsWith: 'instance/ends-with',
  entries: 'instance/entries',
  every: { global: 'iterator/every' },
  exec: { global: 'regexp/exec' },
  fill: 'instance/fill',
  filter: { pure: 'instance/filter', global: ['array/filter', 'iterator/filter'] },
  filterReject: 'instance/filter-reject',
  finally: { global: 'promise/finally' },
  find: { pure: 'instance/find', global: ['array/find', 'iterator/find'] },
  findIndex: 'instance/find-index',
  findLast: 'instance/find-last',
  findLastIndex: 'instance/find-last-index',
  fixed: { global: 'string/fixed' },
  flags: 'instance/flags',
  flatMap: { pure: 'instance/flat-map', global: ['array/flat-map', 'iterator/flat-map'] },
  flat: 'instance/flat',
  getFloat16: undefined,
  getUint8Clamped: undefined,
  fontcolor: { global: 'string/fontcolor' },
  fontsize: { global: 'string/fontsize' },
  forEach: { pure: 'instance/for-each', global: ['instance/for-each', 'iterator/for-each'] },
  includes: 'instance/includes',
  indexOf: 'instance/index-of',
  isWellFormed: 'instance/is-well-formed',
  italics: { global: 'string/italics' },
  join: 'instance/join',
  keys: 'instance/keys',
  lastIndexOf: 'instance/last-index-of',
  link: { global: 'string/link' },
  map: { pure: 'instance/map', global: ['array/map', 'iterator/map'] },
  match: undefined,
  matchAll: 'instance/match-all',
  name: { global: 'function/name' },
  padEnd: 'instance/pad-end',
  padStart: 'instance/pad-start',
  push: 'instance/push',
  reduce: { pure: 'instance/reduce', global: ['array/reduce', 'iterator/reduce'] },
  reduceRight: 'instance/reduce-right',
  repeat: 'instance/repeat',
  replace: undefined,
  replaceAll: 'instance/replace-all',
  reverse: 'instance/reverse',
  search: undefined,
  setFloat16: undefined,
  setUint8Clamped: undefined,
  slice: 'instance/slice',
  sliding: { global: 'iterator/sliding' },
  small: { global: 'string/small' },
  some: { global: 'iterator/some' },
  sort: 'instance/sort',
  splice: 'instance/splice',
  split: undefined,
  startsWith: 'instance/starts-with',
  sticky: { global: 'regexp/sticky' },
  strike: { global: 'string/strike' },
  sub: { global: 'string/sub' },
  sup: { global: 'string/sup' },
  take: { global: 'iterator/take' },
  test: { global: 'regexp/test' },
  toArray: { global: 'iterator/to-array' },
  toAsync: undefined,
  toExponential: undefined,
  toFixed: undefined,
  toJSON: { global: 'date/to-json' },
  toReversed: 'instance/to-reversed',
  toSorted: 'instance/to-sorted',
  toSpliced: 'instance/to-spliced',
  toString: undefined,
  toWellFormed: 'instance/to-well-formed',
  trim: 'instance/trim',
  trimEnd: 'instance/trim-end',
  trimLeft: 'instance/trim-left',
  trimRight: 'instance/trim-right',
  trimStart: 'instance/trim-start',
  uniqueBy: 'instance/unique-by',
  unshift: 'instance/unshift',
  values: 'instance/values',
  windows: { global: 'iterator/windows' },
  with: 'instance/with',
  __defineGetter__: { global: 'object/define-getter' },
  __defineSetter__: { global: 'object/define-setter' },
  __lookupGetter__: { global: 'object/lookup-getter' },
  __lookupSetter__: { global: 'object/lookup-setter' },
  ['__proto__']: { global: 'object/proto' },
};
